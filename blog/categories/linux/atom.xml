<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Linux | Chris's Blog]]></title>
  <link href="http://askcuix.github.com/blog/categories/linux/atom.xml" rel="self"/>
  <link href="http://askcuix.github.com/"/>
  <updated>2013-04-15T00:17:54+08:00</updated>
  <id>http://askcuix.github.com/</id>
  <author>
    <name><![CDATA[Chris]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Korn Shell Script]]></title>
    <link href="http://askcuix.github.com/blog/2013/04/14/korn-shell-script/"/>
    <updated>2013-04-14T23:45:00+08:00</updated>
    <id>http://askcuix.github.com/blog/2013/04/14/korn-shell-script</id>
    <content type="html"><![CDATA[<h2>基本语法</h2>

<p>";"作为语句的结束，因此可以将多个command写在一行。</p>

<pre><code> print -n "Name: "; read name; print ""
</code></pre>

<p>"\\" 可将第二行command与第一行连接起来，若command太长，可通过这种方式写在多行上。</p>

<pre><code> grep filename | sort -u | awk '{print $4}' | \
 uniq -c &gt;&gt; /longpath/file
</code></pre>

<h2>Variables</h2>

<p><strong>Arrays</strong></p>

<p><strong>arrname[1]=4</strong>  To fill in <br/>
<strong>print ${arraname[1]}</strong>  To print out <br/>
<strong>${arrname[*]}</strong>  Get all elements <br/>
<strong>${#arrname[*]}</strong>  Get the number of elements</p>

<!-- more -->


<h2>Branching</h2>

<p><strong>if</strong></p>

<pre><code> if [[ $value -eq 7 ]]   

 then   
    print "$value is 7"   
 fi
</code></pre>

<p><strong>if … else</strong></p>

<pre><code> if [[ $name = "John" ]]
 then
    print "Your welcome, ${name}."
 else
    print "Good bye, ${name}!"
 fi
</code></pre>

<p><strong>if ... elif ... else</strong></p>

<pre><code> if [[ $name = "John" ]]
 then
    print "Your welcome, ${name}."
 elif [[ $name = "Hanna" ]]
 then
    print "Hello, ${name}, who are you?"
 else
    print "Good bye, ${name}!"
 fi
</code></pre>

<p><strong>case</strong></p>

<pre><code> case $var in
   john|fred)  print $invitation;;
   martin)  print $declination;;
   *)  print "Wrong name…";;
 esac
</code></pre>

<h2>Looping</h2>

<p><strong>while</strong></p>

<pre><code> while [[ $count -gt 0 ]];do
    print "\$count is $count"
    (( count -= 1 ))
 done
</code></pre>

<p><strong>until</strong></p>

<pre><code> until [[ $answer = "yes" ]];do
    print -n "Please enter \"yes\": "
    read answer
    print ""
 done
</code></pre>

<p><strong>for</strong></p>

<pre><code> for foo in $(ls);do
    if [[ -d $foo ]];then
       print "$foo is a directory"
    else
       print "$foo is not a directory"
    fi
 done
</code></pre>

<p><strong>continue</strong></p>

<pre><code> while read line
 do
   if [[ $line = *.gz ]];then
      continue
   else
      print $line
   fi
 done
</code></pre>

<p><strong>break</strong></p>

<pre><code> while read line;do
     if [[ $line = *!(.c) ]];then
        break
     else
        print $line
     fi
 done
</code></pre>

<h2>Comparisons</h2>

<p><strong>字符比较</strong>："="用于相等，"!="用于不等。 <br/>
<strong>数字比较</strong>："-eq"用于相等，"-ne"用于不等，"-gt"用于大于，"-lt"用于小于。 <br/>
<strong>与或比较</strong>："&amp;&amp;"表示与，"||"表示或。</p>

<h2>变量操作</h2>

<p><strong>${name##*/}</strong>：用于从包含路径的变量中取出文件名。  <br/>
<strong>${name%/*}</strong>：用于从包含路径的变量中取出路径。  <br/>
<strong>dirname</strong>：用于获取文件的路径，不包含文件名。如：dirname $0 <br/>
<strong>${foo:-4}</strong>：如果foo不存在，则返回4，但foo仍然没有值。  <br/>
<strong>${foo:=4}</strong>：如果foo不存在，则附值4给foo。  <br/>
<strong>${foo:+1}</strong>：如果foo有值，则返回1，但foo的值不改变。  <br/>
<strong>${foo:?"foo not set!"}</strong>：如果foo不存在，则退出程序并显示"foo not set!"。 <br/>
<strong>${foo:startOffset}</strong>：从startOffset处开始截取字符串foo到末尾。 <br/>
<strong>${foo:startOffset:endOffset}</strong>：截取字符串foo从startOffset到endOffset。</p>

<h2>特殊变量</h2>

<p><strong>$#</strong>：命令行参数的个数。 <br/>
<strong>$1, ....$n</strong>：单个命令行参数。 <br/>
<strong>$*</strong>：所有的命令行参数。  <br/>
<strong>$0</strong>：当前script的名字，如果是从另外一个目录执行的，还将包含路径信息。  <br/>
<strong>$?</strong>：上个command执行结果的状态。 <br/>
<strong>$$</strong>：当前script的pid。  <br/>
<strong>$!</strong>：最后一个后台执行的程序的pid。 <br/>
<strong>shift</strong>：删除第一个命令行参数。</p>

<h2>数据重定向</h2>

<p><strong>command > file</strong>：将输出写到新文件或覆盖已存在的文件。 <br/>
<strong>command >> file</strong>：将输出添加在已存在文件中。 <br/>
<strong>command 2> file</strong>：将错误输出重定向到文件。 <br/>
<strong>command 2>/dev/null</strong>：丢弃错误信息。  <br/>
<strong>command 2>&amp;1</strong>：将错误输出重定向到正常输出。  <br/>
<strong>command &lt; file</strong>：从标准输入读取文件。  <br/>
<strong>command &lt; infile > outfile</strong>：组合输入和输出重定向。</p>

<h2>Read Input from User and from Files</h2>

<p><strong>read var</strong>：读取用户输入的变量。如：</p>

<pre><code> print -n "Enter your favorite haircolor: ";read var; print ""。
</code></pre>

<p><strong>按行读取文件的内容到变量</strong>：</p>

<pre><code> { while read myeline;do
      # process $myline
 done } &lt; filename
</code></pre>

<h2>Calculation</h2>

<p>简单的计算可通过 "let" 或  (( … ))。如：(( a+=1 )) 或 let a+=1。</p>

<h2>typeset用法</h2>

<p>typeset用于设置变量属性，如大小写、宽度、左右对齐等都可以用typeset来控制, 当用typeset改变一个变量的属性时,这种改变是永久的。</p>

<p>选项：</p>

<p><strong>-u</strong>：将一个变量的字符变成大写。  <br/>
<strong>-l</strong>：将一个变量的字符变成小写。  <br/>
<strong>-L<num></strong>：将变量变成一个左对齐的num长度的字符串，有些像字符串截取。 <br/>
<strong>-R<num></strong>：将变量变成一个右对齐的num长度的字符串。 <br/>
<strong>-Z<num></strong>：将变量变成一个空格填充，占num个字符位的字符串。 <br/>
<strong>-i</strong>：强制变量为一个整数。 <br/>
<strong>-r</strong>：设置一个只读变量。</p>

<p>文件状态测试</p>

<p><strong>-b filename</strong>：当filename 存在并且是块文件时返回真。 <br/>
<strong>-c filename</strong>：当filename 存在并且是字符文件时返回真。 <br/>
<strong>-d pathname</strong>：当pathname 存在并且是一个目录时返回真。 <br/>
<strong>-e pathname</strong>：当由pathname 指定的文件或目录存在时返回真。 <br/>
<strong>-f filename</strong>：当filename 存在并且是正规文件时返回真。 <br/>
<strong>-h filename</strong>：当filename 存在并且是符号链接文件时返回真。 <br/>
<strong>-r pathname</strong>：当由pathname 指定的文件或目录存在并且可读时返回真。 <br/>
<strong>-s filename</strong>：当filename 存在并且文件大小大于0 时返回真。 <br/>
<strong>-w pathname</strong>：当由pathname 指定的文件或目录存在并且可写时返回真。 <br/>
<strong>-x pathname</strong>：当由pathname 指定的文件或目录存在并且可执行时返回真。 <br/>
<strong>-O pathname</strong>：当由pathname 存在并且被当前进程的有效用户id 的用户拥有时返回真。 <br/>
<strong>-G pathname</strong>：当由pathname 存在并且属于当前进程的有效用户id 的用户的用户组时返回真。 <br/>
<strong>file1 -nt file2</strong>：file1 比file2 新时返回真。 <br/>
<strong>file1 -ot file2</strong>：file1 比file2 旧时返回真。</p>

<h2>字符串测试</h2>

<p><strong>-z string</strong>：字符串string 为空串(长度为0)时返回真。 <br/>
<strong>-n string</strong>：字符串string 为非空串时返回真。</p>

<h2>Resources</h2>

<p><strong>Korn Shell Programming</strong>：<a href="http://www.bo.infn.it/alice/alice-doc/mll-doc/impgde/node15.html">http://www.bo.infn.it/alice/alice-doc/mll-doc/impgde/node15.html</a> <br/>
<strong>Learning the Korn Shell</strong>: <a href="http://docstore.mik.ua/orelly/unix/ksh/">http://docstore.mik.ua/orelly/unix/ksh/</a></p>
]]></content>
  </entry>
  
</feed>
